<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vernacular Vibe Coder</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }
        /* Simple spinner animation */
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #09f;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Custom scrollbar for webkit browsers */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="flex flex-col h-screen">
        <!-- Header -->
        <header class="bg-white shadow-md p-4 flex items-center justify-between z-10">
            <div class="flex items-center">
                <svg class="w-8 h-8 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg>
                <h1 class="text-2xl font-bold text-gray-800">Vernacular Vibe Coder</h1>
            </div>
            <p class="text-gray-500 hidden md:block">Describe your app idea in your language and watch it come to life.</p>
        </header>

        <!-- Main Content -->
        <main class="flex-grow grid grid-cols-1 lg:grid-cols-2 gap-4 p-4 overflow-hidden">
            
            <!-- Input Panel -->
            <div class="bg-white rounded-xl shadow-lg flex flex-col h-full">
                <div class="p-4 border-b border-gray-200">
                    <h2 class="text-lg font-semibold">1. Describe Your Vision</h2>
                    <p class="text-sm text-gray-500">Explain what you want to build. Be descriptive!</p>
                </div>
                
                <div class="p-4">
                    <label for="language-select" class="block text-sm font-medium text-gray-700 mb-2">Select Language:</label>
                    <select id="language-select" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <option value="Hindi">हिंदी (Hindi)</option>
                        <option value="Marathi">मराठी (Marathi)</option>
                        <option value="Tamil">தமிழ் (Tamil)</option>
                        <option value="Telugu">తెలుగు (Telugu)</option>
                        <option value="Bengali">বাংলা (Bengali)</option>
                        <option value="Kannada">ಕನ್ನಡ (Kannada)</option>
                        <option value="English">English</option>
                    </select>
                </div>

                <div class="flex-grow p-4 flex flex-col">
                    <textarea id="app-description" class="w-full flex-grow p-3 border border-gray-300 rounded-md resize-none focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 'एक सिंपल कैलकुलेटर बनाओ जिसमें दो नंबर जोड़ सकें' or 'एक बटन बनाओ जिस पर क्लिक करने से एक चुटकुला दिखे'"></textarea>
                </div>
                
                <div class="p-4 border-t border-gray-200">
                    <button id="generate-btn" class="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 flex items-center justify-center">
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2 1M4 7l2-1M4 7v2.5M12 21v-2.5M17 14l-2-1m2 1l-2 1m2-1v-2.5M7 14l2-1M7 14l2 1M7 14v-2.5"></path></svg>
                        Create App
                    </button>
                </div>
            </div>

            <!-- Output Panel -->
            <div class="bg-white rounded-xl shadow-lg flex flex-col h-full">
                 <div class="p-4 border-b border-gray-200">
                    <h2 class="text-lg font-semibold">2. Live Preview & Code</h2>
                     <p class="text-sm text-gray-500">Your generated app will appear here.</p>
                </div>
                <div id="output-container" class="flex-grow flex flex-col relative">
                    <!-- Loading Spinner -->
                    <div id="loader" class="absolute inset-0 bg-white bg-opacity-80 flex flex-col items-center justify-center z-20 hidden">
                        <div class="spinner"></div>
                        <p class="mt-4 text-gray-600 font-medium">Building your vision... this may take a moment.</p>
                    </div>

                    <!-- Placeholder -->
                    <div id="placeholder" class="flex-grow flex flex-col items-center justify-center text-center text-gray-400 p-4">
                        <svg class="w-16 h-16 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.75 3.104v5.714a2.25 2.25 0 01-.659 1.591L5 14.5M9.75 3.104c.251.042.502.042.75 0C11.002 3.062 12 3.684 12 4.5s-.998 1.438-2.25 1.438c-1.252 0-2.25-.684-2.25-1.438 0-.816.998-1.438 2.25-1.438zM14.25 14.5l-2.25-2.5a2.25 2.25 0 00-.659-1.591V3.104c.251.042.502.042.75 0C13.002 3.062 14 3.684 14 4.5s-.998 1.438-2.25 1.438c-1.252 0-2.25-.684-2.25-1.438 0-.816.998-1.438 2.25-1.438z"></path></svg>
                        <h3 class="font-semibold text-lg">Your App Preview Will Appear Here</h3>
                        <p class="text-sm">Describe your app on the left and click "Create App" to start.</p>
                    </div>

                    <!-- Tabbed Interface -->
                    <div id="result-tabs" class="hidden flex-col flex-grow">
                        <div class="flex border-b border-gray-200">
                            <button id="preview-tab" class="px-4 py-2 font-medium text-sm text-blue-600 border-b-2 border-blue-600">Preview</button>
                            <button id="code-tab" class="px-4 py-2 font-medium text-sm text-gray-500">Code</button>
                        </div>
                        <div class="flex-grow overflow-auto">
                            <iframe id="preview-frame" class="w-full h-full border-0"></iframe>
                            <div id="code-view" class="hidden h-full bg-gray-900 text-white p-4 overflow-auto">
                                <pre><code id="code-output" class="language-html"></code></pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // DOM Elements
        const generateBtn = document.getElementById('generate-btn');
        const appDescription = document.getElementById('app-description');
        const languageSelect = document.getElementById('language-select');
        const loader = document.getElementById('loader');
        const placeholder = document.getElementById('placeholder');
        const resultTabs = document.getElementById('result-tabs');
        const previewFrame = document.getElementById('preview-frame');
        const codeOutput = document.getElementById('code-output');
        const previewTab = document.getElementById('preview-tab');
        const codeTab = document.getElementById('code-tab');
        const codeView = document.getElementById('code-view');
        
        // Tab functionality
        previewTab.addEventListener('click', () => {
            previewFrame.classList.remove('hidden');
            codeView.classList.add('hidden');
            previewTab.classList.add('text-blue-600', 'border-blue-600');
            previewTab.classList.remove('text-gray-500');
            codeTab.classList.remove('text-blue-600', 'border-blue-600');
            codeTab.classList.add('text-gray-500');
        });

        codeTab.addEventListener('click', () => {
            previewFrame.classList.add('hidden');
            codeView.classList.remove('hidden');
            codeTab.classList.add('text-blue-600', 'border-blue-600');
            codeTab.classList.remove('text-gray-500');
            previewTab.classList.remove('text-blue-600', 'border-blue-600');
            previewTab.classList.add('text-gray-500');
        });


        // Main function to generate the app
        const generateApp = async () => {
            const description = appDescription.value.trim();
            const language = languageSelect.value;

            if (!description) {
                alert('Please describe the app you want to build.');
                return;
            }

            // Show loader and hide placeholder/results
            loader.classList.remove('hidden');
            placeholder.classList.add('hidden');
            resultTabs.classList.add('hidden');
            generateBtn.disabled = true;
            generateBtn.classList.add('opacity-50', 'cursor-not-allowed');

            const systemPrompt = `
                You are an expert web developer who specializes in creating single-file HTML applications.
                Your task is to translate a user's request, provided in an Indian vernacular language, into a complete, functional, and aesthetically pleasing web app.
                
                **Rules:**
                1.  **Single File:** Generate ONLY a single HTML file. ALL CSS and JavaScript MUST be included within the HTML file using <style> and <script> tags.
                2.  **Styling:** Use Tailwind CSS for all styling. Import it from the CDN: <script src="https://cdn.tailwindcss.com"></script>.
                3.  **Aesthetics:** Create modern, clean, and visually appealing layouts. Use good padding, margins, and a pleasant color scheme. Use the 'Inter' font from Google Fonts.
                4.  **Functionality:** The generated JavaScript should be well-written and functional, bringing the user's idea to life.
                5.  **No External Files:** Do not use any external image files, JS libraries (except Tailwind), or CSS files. Use inline SVGs for icons if needed.
                6.  **Complete Code:** Provide the full, runnable HTML code. Do not use placeholders like '...'.
                7.  **Output Format:** Respond ONLY with the raw HTML code. Do not include any explanations, apologies, or markdown formatting like \`\`\`html or \`\`\`. Just the code itself.
            `;

            const userQuery = `Language of request: ${language}. User's request: "${description}"`;
            
            // --- Gemini API Call ---
            const apiKey = ""; // Canvas will provide the key
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = {
                contents: [{ parts: [{ text: userQuery }] }],
                systemInstruction: { parts: [{ text: systemPrompt }] },
            };

            try {
                 const response = await fetchWithRetry(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`API Error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();
                
                const candidate = result.candidates?.[0];
                if (candidate && candidate.content?.parts?.[0]?.text) {
                    let generatedCode = candidate.content.parts[0].text;
                    
                    // Clean the response: remove markdown backticks if they exist
                    generatedCode = generatedCode.replace(/^```html\n/, '').replace(/\n```$/, '');

                    // Display results
                    placeholder.classList.add('hidden');
                    resultTabs.classList.remove('hidden');
                    resultTabs.classList.add('flex');
                    
                    codeOutput.textContent = generatedCode;
                    previewFrame.srcdoc = generatedCode;

                } else {
                    throw new Error("Received an empty or invalid response from the API.");
                }

            } catch (error) {
                console.error("Error generating app:", error);
                placeholder.classList.remove('hidden');
                placeholder.innerHTML = `<div class="text-red-500 text-center">
                    <h3 class="font-semibold text-lg">An Error Occurred</h3>
                    <p class="text-sm">${error.message}</p>
                    <p class="text-xs mt-2">Please try refining your prompt or check the console for more details.</p>
                </div>`;
                resultTabs.classList.add('hidden');
            } finally {
                // Hide loader and re-enable button
                loader.classList.add('hidden');
                generateBtn.disabled = false;
                generateBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        };
        
        // Fetch with exponential backoff retry mechanism
        async function fetchWithRetry(url, options, retries = 3, delay = 1000) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, options);
                    if (response.status !== 429) { // Not a rate limit error
                        return response;
                    }
                    // It's a rate limit error, wait and retry
                    console.warn(`Rate limited. Retrying in ${delay / 1000}s...`);
                } catch (error) {
                    // Network or other errors
                    if (i === retries - 1) throw error; // Last retry failed, throw error
                }
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2; // Exponential backoff
            }
        }


        generateBtn.addEventListener('click', generateApp);
    </script>
</body>
</html>
